DROP DATABASE IF EXISTS CinemaDB;
CREATE DATABASE CinemaDB;
USE CinemaDB;

DROP TABLE IF EXISTS Invoice;
DROP TABLE IF EXISTS Payments;
DROP TABLE IF EXISTS BookingSnackDetails;
DROP TABLE IF EXISTS BookingSnacks;
DROP TABLE IF EXISTS Snacks;
DROP TABLE IF EXISTS BookingTickets;
DROP TABLE IF EXISTS Bookings;
DROP TABLE IF EXISTS TicketPrice;
DROP TABLE IF EXISTS Discounts;
DROP TABLE IF EXISTS Customers;
DROP TABLE IF EXISTS ScreeningSeats;
DROP TABLE IF EXISTS Screenings;
DROP TABLE IF EXISTS SeatMap;
DROP TABLE IF EXISTS SeatType;
DROP TABLE IF EXISTS CinemaRooms;
DROP TABLE IF EXISTS MovieCasts;
DROP TABLE IF EXISTS Casts;
DROP TABLE IF EXISTS Movies;

-- Movies
CREATE TABLE Movies (
  MovieID INT AUTO_INCREMENT PRIMARY KEY,
  MovieTitle VARCHAR(255) NOT NULL,
  Genre VARCHAR(100) NOT NULL,
  DurationMinutes INT NOT NULL
);

-- Casts
CREATE TABLE Casts (
  CastID INT AUTO_INCREMENT PRIMARY KEY,
  CastName VARCHAR(100) NOT NULL
);

-- MovieCasts
CREATE TABLE MovieCasts (
  MovieID INT NOT NULL,
  CastID INT NOT NULL,
  Role VARCHAR(100) NOT NULL,
  PRIMARY KEY (MovieID, CastID),
  FOREIGN KEY (MovieID) REFERENCES Movies(MovieID) ON DELETE CASCADE,
  FOREIGN KEY (CastID) REFERENCES Casts(CastID) ON DELETE CASCADE
);

-- CinemaRooms
CREATE TABLE CinemaRooms (
  RoomID INT AUTO_INCREMENT PRIMARY KEY,
  RoomName VARCHAR(100) NOT NULL,
  Capacity INT NOT NULL,
  RoomType VARCHAR(50) NOT NULL
);

-- SeatType
CREATE TABLE SeatType (
  SeatTypeID INT AUTO_INCREMENT PRIMARY KEY,
  Type VARCHAR(50) NOT NULL,
  Description VARCHAR(255)
);

-- SeatMap
CREATE TABLE SeatMap (
  SeatID INT AUTO_INCREMENT PRIMARY KEY,
  SeatRow CHAR(1) NOT NULL,
  SeatCol INT NOT NULL,
  RoomID INT NOT NULL,
  SeatTypeID INT NOT NULL,
  UNIQUE (RoomID, SeatRow, SeatCol),
  FOREIGN KEY (RoomID) REFERENCES CinemaRooms(RoomID) ON DELETE CASCADE,
  FOREIGN KEY (SeatTypeID) REFERENCES SeatType(SeatTypeID)
);

-- Screenings
CREATE TABLE Screenings (
  ScreeningID INT AUTO_INCREMENT PRIMARY KEY,
  ScreeningDate DATE NOT NULL,
  ScreeningTime TIME NOT NULL,
  MovieID INT NOT NULL,
  RoomID INT NOT NULL,
  FOREIGN KEY (MovieID) REFERENCES Movies(MovieID) ON DELETE CASCADE,
  FOREIGN KEY (RoomID) REFERENCES CinemaRooms(RoomID) ON DELETE CASCADE
);

-- ScreeningSeats
CREATE TABLE ScreeningSeats (
  ScreeningID INT NOT NULL,
  SeatID INT NOT NULL,
  Status ENUM('Available', 'Booked') NOT NULL DEFAULT 'Available',
  PRIMARY KEY (ScreeningID, SeatID),
  FOREIGN KEY (ScreeningID) REFERENCES Screenings(ScreeningID) ON DELETE CASCADE,
  FOREIGN KEY (SeatID) REFERENCES SeatMap(SeatID) ON DELETE CASCADE
);

-- Customers
CREATE TABLE Customers (
  CustomerID INT AUTO_INCREMENT PRIMARY KEY,
  CustomerName VARCHAR(100) NOT NULL,
  PhoneNumber VARCHAR(20) NOT NULL,
  CustomerEmail VARCHAR(100) NOT NULL
);

-- Discounts
CREATE TABLE Discounts (
  DiscountID INT AUTO_INCREMENT PRIMARY KEY,
  Code VARCHAR(50) NOT NULL UNIQUE,
  Percentage DECIMAL(5,2) NOT NULL,
  ValidUntil DATE NOT NULL
);

-- TicketPrice
CREATE TABLE TicketPrice (
  PricingID INT AUTO_INCREMENT PRIMARY KEY,
  SeatTypeID INT NOT NULL UNIQUE,
  Price DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (SeatTypeID) REFERENCES SeatType(SeatTypeID) ON DELETE CASCADE
);

-- Bookings
CREATE TABLE Bookings (
  BookingID INT AUTO_INCREMENT PRIMARY KEY,
  CustomerID INT NOT NULL,
  BookingDate DATETIME NOT NULL,
  IsCancelled BOOLEAN DEFAULT FALSE,
  FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);

-- BookingTickets
CREATE TABLE BookingTickets (
  BookingTicketsID INT AUTO_INCREMENT PRIMARY KEY,
  BookingID INT NOT NULL,
  ScreeningID INT NULL,
  SeatID INT NOT NULL,
  PricingID INT NOT NULL,
  FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID) ON DELETE CASCADE,
  FOREIGN KEY (ScreeningID) REFERENCES Screenings(ScreeningID),
  FOREIGN KEY (SeatID) REFERENCES SeatMap(SeatID),
  FOREIGN KEY (PricingID) REFERENCES TicketPrice(PricingID)
);

-- Snacks
CREATE TABLE Snacks (
  SnackID INT AUTO_INCREMENT PRIMARY KEY,
  SnackName VARCHAR(100) NOT NULL,
  Price DECIMAL(10,2) NOT NULL
);

-- BookingSnacks
CREATE TABLE BookingSnacks (
  BookingSnackID INT AUTO_INCREMENT PRIMARY KEY,
  BookingID INT NOT NULL,
  TotalAmount DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID) ON DELETE CASCADE
);

-- BookingSnackDetails
CREATE TABLE BookingSnackDetails (
  BookingSnackDetailID INT AUTO_INCREMENT PRIMARY KEY,
  BookingSnackID INT NOT NULL,
  SnackID INT NOT NULL,
  Quantity INT NOT NULL,
  FOREIGN KEY (BookingSnackID) REFERENCES BookingSnacks(BookingSnackID) ON DELETE CASCADE,
  FOREIGN KEY (SnackID) REFERENCES Snacks(SnackID) ON DELETE CASCADE
);

-- Payments
CREATE TABLE Payments (
  PaymentID INT AUTO_INCREMENT PRIMARY KEY,
  PaymentDate DATETIME NOT NULL,
  Amount DECIMAL(10,2) NOT NULL,
  PaymentMethod VARCHAR(50) NOT NULL,
  Status ENUM('Pending', 'Paid', 'Failed') DEFAULT 'Pending',
  CustomerID INT NOT NULL,
  BookingID INT NOT NULL UNIQUE,
  FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE,
  FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID) ON DELETE CASCADE
);

-- Invoice
CREATE TABLE Invoice (
  InvoiceID INT AUTO_INCREMENT PRIMARY KEY,
  TotalAmount DECIMAL(10,2) NOT NULL,
  InvoiceDate DATETIME NOT NULL,
  PaymentID INT NOT NULL UNIQUE,
  FOREIGN KEY (PaymentID) REFERENCES Payments(PaymentID) ON DELETE CASCADE
);

-- Users
CREATE TABLE Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin_cinema', 'ticket_clerk') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);